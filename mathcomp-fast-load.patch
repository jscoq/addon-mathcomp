diff --git a/mathcomp/algebra/rat.v b/mathcomp/algebra/rat.v
index 118c495..f2a07cd 100644
--- a/mathcomp/algebra/rat.v
+++ b/mathcomp/algebra/rat.v
@@ -925,6 +925,7 @@ Ltac ring_to_rat :=
           -?[(_ + _)%R]/(_ + _)%Q -?[(_ * _)%R]/(_ * _)%Q
           -?[(- _)%R]/(- _)%Q -?[(_ ^-1)%R]/(_ ^-1)%Q /=.
 
+(*
 Lemma rat_ring_theory : (ring_theory 0%Q 1%Q addq mulq subq oppq eq).
 Proof.
 split => * //; rat_to_ring;
@@ -941,6 +942,7 @@ by move=> p /eqP p_neq0; rat_to_ring; rewrite mulVf.
 Qed.
 
 Add Field rat_field : rat_field_theory.
+*)
 
 (* Pretty printing or normal element of rat. *)
 Notation "[ 'rat' x // y ]" := (@Rat (x, y) _) (only printing) : ring_scope.
diff --git a/mathcomp/solvable/all_solvable.v b/mathcomp/solvable/all_solvable.v
index b05a3c4..bc3d3a4 100644
--- a/mathcomp/solvable/all_solvable.v
+++ b/mathcomp/solvable/all_solvable.v
@@ -1,6 +1,6 @@
 Require Export abelian.
 Require Export alt.
-Require Export burnside_app.
+(* Require Export burnside_app. *)
 Require Export center.
 Require Export commutator.
 Require Export cyclic.
diff --git a/mathcomp/ssreflect/order.v b/mathcomp/ssreflect/order.v
index 43fbd05..5250094 100644
--- a/mathcomp/ssreflect/order.v
+++ b/mathcomp/ssreflect/order.v
@@ -1,5 +1,6 @@
 (* (c) Copyright 2006-2019 Microsoft Corporation and Inria.                  *)
 (* Distributed under the terms of CeCILL-B.                                  *)
+From Coq Require Import Setoid RelationClasses.
 From mathcomp Require Import ssreflect ssrfun ssrbool eqtype ssrnat choice seq.
 From mathcomp Require Import path fintype tuple bigop finset div prime finfun.
 From mathcomp Require Import finset.
diff --git a/mathcomp/ssreflect/prime.v b/mathcomp/ssreflect/prime.v
index c60b72a..60afad8 100644
--- a/mathcomp/ssreflect/prime.v
+++ b/mathcomp/ssreflect/prime.v
@@ -121,7 +121,7 @@ Notation "p ^? e :: pd" := (cons_pfactor p e pd)
 End PrimeDecompAux.
 
 (* For pretty-printing. *)
-Definition NumFactor (f : nat * nat) := ([Num of f.1], f.2).
+(* Definition NumFactor (f : nat * nat) := ([Num of f.1], f.2). *)
 
 Definition pfactor p e := p ^ e.
 
diff --git a/mathcomp/ssreflect/ssrAC.v b/mathcomp/ssreflect/ssrAC.v
index bbb5890..fef4d96 100644
--- a/mathcomp/ssreflect/ssrAC.v
+++ b/mathcomp/ssreflect/ssrAC.v
@@ -84,6 +84,84 @@ elim: s1 (loop [::] s2) => [n|s11 IHs1 s12 IHs2] //= l.
 by rewrite IHs1 [in RHS]IHs1 IHs2 catA.
 Qed.
 
+
+Require Import BinPos Ring.
+
+Section NumberInterpretation.
+
+Import BinPos.
+
+Section Trec.
+
+Import NatTrec.
+
+Fixpoint nat_of_pos p0 :=
+  match p0 with
+  | xO p => (nat_of_pos p).*2
+  | xI p => (nat_of_pos p).*2.+1
+  | xH   => 1
+  end.
+
+End Trec.
+
+Local Coercion nat_of_pos : positive >-> nat.
+
+Coercion nat_of_bin b := if b is Npos p then p : nat else 0.
+
+Fixpoint pos_of_nat n0 m0 :=
+  match n0, m0 with
+  | n.+1, m.+2 => pos_of_nat n m
+  | n.+1,    1 => xO (pos_of_nat n n)
+  | n.+1,    0 => xI (pos_of_nat n n)
+  |    0,    _ => xH
+  end.
+
+Definition bin_of_nat n0 := if n0 is n.+1 then Npos (pos_of_nat n n) else 0%num.
+
+Lemma bin_of_natK : cancel bin_of_nat nat_of_bin.
+Proof.
+have sub2nn n : n.*2 - n = n by rewrite -addnn addKn.
+case=> //= n; rewrite -[n in RHS]sub2nn.
+by elim: n {2 4}n => // m IHm [|[|n]] //=; rewrite IHm // natTrecE sub2nn.
+Qed.
+
+Lemma nat_of_binK : cancel nat_of_bin bin_of_nat.
+Proof.
+case=> //=; elim=> //= p; case: (nat_of_pos p) => //= n [<-].
+  by rewrite natTrecE !addnS {2}addnn; elim: {1 3}n.
+by rewrite natTrecE addnS /= addnS {2}addnn; elim: {1 3}n.
+Qed.
+
+Lemma nat_of_succ_pos p : Pos.succ p = p.+1 :> nat.
+Proof. by elim: p => //= p ->; rewrite !natTrecE. Qed.
+
+Lemma nat_of_add_pos p q : (p + q)%positive = p + q :> nat.
+Proof.
+apply: @fst _ (Pplus_carry p q = (p + q).+1 :> nat) _.
+elim: p q => [p IHp|p IHp|] [q|q|] //=; rewrite !natTrecE //;
+  by rewrite ?IHp ?nat_of_succ_pos ?(doubleS, doubleD, addn1, addnS).
+Qed.
+
+Lemma nat_of_mul_pos p q : (p * q)%positive = p * q :> nat.
+Proof.
+elim: p => [p IHp|p IHp|] /=; rewrite ?mul1n //;
+  by rewrite ?nat_of_add_pos /= !natTrecE IHp doubleMl.
+Qed.
+
+Lemma nat_of_add_bin b1 b2 : (b1 + b2)%num = b1 + b2 :> nat.
+Proof. by case: b1 b2 => [|p] [|q]; rewrite ?addn0 //= nat_of_add_pos. Qed.
+
+Lemma nat_of_mul_bin b1 b2 : (b1 * b2)%num = b1 * b2 :> nat.
+Proof. by case: b1 b2 => [|p] [|q]; rewrite ?muln0 //= nat_of_mul_pos. Qed.
+
+Lemma nat_of_exp_bin n (b : N) : n ^ b = pow_N 1 muln n b.
+Proof.
+by case: b; last (elim=> //= p <-; rewrite natTrecE mulnn -expnM muln2 ?expnS).
+Qed.
+
+End NumberInterpretation.
+
+
 Definition Leaf_of_nat n := Leaf ((pos_of_nat n n) - 1)%positive.
 
 Module Import Syntax.
diff --git a/mathcomp/ssreflect/ssrnat.v b/mathcomp/ssreflect/ssrnat.v
index 390b303..983a65c 100644
--- a/mathcomp/ssreflect/ssrnat.v
+++ b/mathcomp/ssreflect/ssrnat.v
@@ -1,9 +1,13 @@
 (* (c) Copyright 2006-2016 Microsoft Corporation and Inria.                  *)
 (* Distributed under the terms of CeCILL-B.                                  *)
 From mathcomp Require Import ssreflect ssrfun ssrbool eqtype.
+(*
 Require Import BinNat.
 Require BinPos Ndec.
 Require Export Ring.
+*)
+
+From Coq Require Setoid. (* for rewriting <-> *)
 
 (******************************************************************************)
 (* A version of arithmetic on nat (natural numbers) that is better suited to  *)
@@ -1841,6 +1845,7 @@ End NatTrec.
 
 Notation natTrecE := NatTrec.trecE.
 
+(*
 Lemma eq_binP : Equality.axiom N.eqb.
 Proof.
 move=> p q; apply: (iffP idP) => [|<-]; last by case: p => //; elim.
@@ -1925,6 +1930,7 @@ by case: b; last (elim=> //= p <-; rewrite natTrecE mulnn -expnM muln2 ?expnS).
 Qed.
 
 End NumberInterpretation.
+*)
 
 (* Big(ger) nat IO; usage:                              *)
 (*     Num 1 072 399                                    *)
@@ -1933,6 +1939,7 @@ End NumberInterpretation.
 (*        to display the result of an expression that   *)
 (*        returns a larger integer.                     *)
 
+(*
 Record number : Type := Num {bin_of_number :> N}.
 
 Definition extend_number (nn : number) m := Num (nn * 1000 + bin_of_nat m).
@@ -1945,9 +1952,11 @@ Canonical number_eqType := Eval hnf in EqType number number_eqMixin.
 
 Notation "[ 'Num' 'of' e ]" := (Num (bin_of_nat e))
   (at level 0, format "[ 'Num'  'of'  e ]") : nat_scope.
+*)
 
 (* Interface to ring/ring_simplify tactics *)
 
+(*
 Lemma nat_semi_ring : semi_ring_theory 0 1 addn muln (@eq _).
 Proof. exact: mk_srt add0n addnC addnA mul1n mul0n mulnC mulnA mulnDl. Qed.
 
@@ -1957,6 +1966,7 @@ Proof. by move: nat_of_add_bin nat_of_mul_bin; split=> //= m n /eqP ->. Qed.
 
 Lemma nat_power_theory : power_theory 1 muln (@eq _) nat_of_bin expn.
 Proof. by split; apply: nat_of_exp_bin. Qed.
+*)
 
 (* Interface to the ring tactic machinery. *)
 
@@ -1964,11 +1974,13 @@ Fixpoint pop_succn e := if e is e'.+1 then fun n => pop_succn e' n.+1 else id.
 
 Ltac pop_succn e := eval lazy beta iota delta [pop_succn] in (pop_succn e 1).
 
+(*
 Ltac nat_litteral e :=
   match pop_succn e with
   | ?n.+1 => constr: (bin_of_nat n)
   |     _ => NotConstant
   end.
+*)
 
 Ltac succn_to_add :=
   match goal with
@@ -1981,9 +1993,11 @@ Ltac succn_to_add :=
   | _ => idtac
   end.
 
+(*
 Add Ring nat_ring_ssr : nat_semi_ring (morphism nat_semi_morph,
    constants [nat_litteral], preprocess [succn_to_add],
    power_tac nat_power_theory [nat_litteral]).
+*)
 
 (* A congruence tactic, similar to the boolean one, along with an .+1/+  *)
 (* normalization tactic.                                                 *)
